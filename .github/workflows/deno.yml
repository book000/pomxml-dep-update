Skip to content
Search or jump to…
Pull requests
Issues
Marketplace
Explore
 
@zakwarlord7 
Your account has been flagged.
Because of that, your profile is hidden from the public. If you believe this is a mistake, contact support to have your account status reviewed.
zakwarlord7
/
pomxml-dep-update
Public
forked from book000/pomxml-dep-update
Code
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
feat: init
萎えた
 master
 v1.0.4 
…
 v1.0.0
@book000
book000 committed on Dec 17, 2021 
0 parents commit e3b486e4fae94461f746c92b0e27a16647f34523
Show file tree Hide file tree
Showing 8 changed files with 443 additions and 0 deletions.
 4  
.eslintignore
@@ -0,0 +1,4 @@
webpack.config.js
dist
node_modules
gasScript.js
 16  
.eslintrc.yml
@@ -0,0 +1,16 @@
env:
  es2021: true
  node: true
extends:
  - standard
  - plugin:@typescript-eslint/recommended
  - prettier
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: latest
  sourceType: module
  project: ./tsconfig.json
plugins:
  - '@typescript-eslint'
rules:
  "@typescript-eslint/no-explicit-any": 0
 7  
.gitignore
@@ -0,0 +1,7 @@
dist
node_modules
dist.tgz
config/*
!config/.gitkeep
yarn-error.log
yarn.lock
 2  
.prettierrc.yml
@@ -0,0 +1,2 @@
semi: false
singleQuote: true
 76  
_action.yml
@@ -0,0 +1,76 @@
name: pom.xml Dependencies Updater
description: If there is a newer version of the dependency in pom.xml, rewrite it to the latest version.
branding:
  icon: thumbs-up
  color: orange
inputs:
  pom-path:
    description: pom.xml path
    required: true
  ignore-package:
    description: Minecraft version
    required: true
runs:
  using: composite

  steps:
    - name: Create PaperServerTest directory & Chdir
      run: |
        mkdir PaperServerTest
        cd PaperServerTest
        mkdir plugins
      shell: bash

    - name: Download latest paper server
      working-directory: PaperServerTest
      run: |
        curl -o paper.jar -L "https://api.tomacheese.com/papermc/${{ inputs.minecraft-version }}/latest"
        file paper.jar
        file paper.jar | grep "HTML document" && cat paper.jar || true
      shell: bash

    - name: Agree to EULA
      working-directory: PaperServerTest
      run: echo eula=true> eula.txt
      shell: bash

    - name: Download CheckPluginEnabling
      working-directory: PaperServerTest
      run: |
        wget -O plugins/CheckPluginEnabling.jar `curl --silent "https://api.github.com/repos/jaoafa/CheckPluginEnabling/releases/latest" | jq -r '.assets[0].browser_download_url'`
        file plugins/CheckPluginEnabling.jar
      shell: bash

    - name: Copy jar
      working-directory: PaperServerTest
      run: cp ../target/`ls -S ../target | head -n 1` plugins/${{ inputs.plugin-name }}.jar
      shell: bash

    - name: Start Paper Server
      working-directory: PaperServerTest
      run: timeout 600 java -jar paper.jar
      shell: bash

    - name: Check exists plugins.json
      working-directory: PaperServerTest
      run: (test -f plugins.json && echo plugins.json exists) || exit 1
      shell: bash

    - name: Check enabled plugin from plugins.json
      working-directory: PaperServerTest
      run: |
        cat plugins.json
        cat plugins.json | jq --arg PLUGIN_NAME ${{ inputs.plugin-name }} --exit-status 'index([$PLUGIN_NAME]) != null'
      shell: bash

    - name: Check exists exceptions.json
      working-directory: PaperServerTest
      run: (test -f exceptions.json && echo exceptions.json exists) || exit 1
      shell: bash

    - name: Check exceptions from exceptions.json
      working-directory: PaperServerTest
      run: |
        cat exceptions.json
        cat exceptions.json | jq --exit-status '. | length == 0'
      shell: bash
 52  
package.json
@@ -0,0 +1,52 @@
{
  "name": "pomxml-dep-update",
  "version": "1.0.0",
  "description": "If there is a newer version of the dependency in pom.xml, rewrite it to the latest version.",
  "main": "dist/main.js",
  "repository": "git@github.com:book000/pomxml-dep-update.git",
  "author": "Tomachi",
  "private": true,
  "scripts": {
    "build": "ts-node ./src/main.ts",
    "dev": "ts-node-dev ./src/main.ts",
    "start": "node ./dist/main.js",
    "compile": "tsc -p .",
    "compile:test": "tsc -p . --noEmit",
    "lint": "run-p -c lint:prettier lint:eslint lint:tsc",
    "lint:prettier": "prettier --check src",
    "lint:eslint": "eslint . --ext ts,tsx",
    "lint:tsc": "tsc",
    "fix": "run-s fix:prettier fix:eslint",
    "fix:eslint": "eslint . --ext ts,tsx --fix",
    "fix:prettier": "prettier --write src"
  },
  "devDependencies": {
    "@types/config": "^0.0.40",
    "@types/libmime": "^5.0.0",
    "@types/node": "^16.11.11",
    "@types/quoted-printable": "^1.0.0",
    "@types/utf8": "^3.0.0",
    "@types/yargs": "^17.0.7",
    "@typescript-eslint/eslint-plugin": "^5.4.0",
    "@typescript-eslint/parser": "^5.4.0",
    "axios": "^0.24.0",
    "eslint": "8.3.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-config-standard": "^16.0.3",
    "eslint-plugin-import": "2.25.3",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-promise": "^5.1.1",
    "fast-xml-parser": "^4.0.0-beta.8",
    "libmime": "^5.0.0",
    "prettier": "2.4.1",
    "quoted-printable": "^1.0.1",
    "ts-loader": "^9.2.6",
    "ts-node": "^10.4.0",
    "ts-node-dev": "^1.1.8",
    "typescript": "^4.5.2",
    "webpack-node-externals": "^3.0.0",
    "xml-formatter": "^2.5.1",
    "yargs": "^17.3.0",
    "yarn-run-all": "^3.1.1"
  }
}
 257  
src/main.ts
@@ -0,0 +1,257 @@
import axios from 'axios'
import { XMLBuilder, XMLParser } from 'fast-xml-parser'
import fs from 'fs'
import xmlFormat from 'xml-formatter'
import yargs from 'yargs'

interface Repository {
  id: string
  url: string
}

interface Dependency {
  groupId: string
  artifactId: string
  version: string
}

interface Pom {
  repositories: Repository[]
  dependencies: Dependency[]
}

const MvnCentralRepository: Repository = {
  id: 'mvncentral',
  url: 'https://repo1.maven.org/maven2/',
}

async function parsePom(content: string): Promise<Pom> {
  const parser = new XMLParser()
  const pomXml = parser.parse(content)

  const repositories: Repository[] = pomXml.project.repositories.repository
  const dependencies: Dependency[] = pomXml.project.dependencies.dependency

  return {
    repositories,
    dependencies,
  }
}

async function existsUrl(url: string) {
  console.log('[existsUrl]', 'url:', url)
  try {
    const response = await axios.get(url)
    console.log('[existsUrl]', 'response:', response.status)
    return response.status === 200
  } catch (error) {
    return false
  }
}

async function findAsync<T>(
  array: T[],
  predicate: (t: T) => Promise<boolean>
): Promise<T | undefined> {
  for (const t of array) {
    if (await predicate(t)) {
      return t
    }
  }
  return undefined
}

function getMavenMetadataXmlUrl(
  repository: Repository,
  dependency: Dependency
) {
  return (
    repository.url +
    (
      dependency.groupId.replace(/\./g, '/') +
      '/' +
      dependency.artifactId +
      '/maven-metadata.xml'
    ).replace(/\/\//g, '/')
  )
}

async function getDependencyRepo(
  repository: Repository[],
  dependency: Dependency
) {
  const depRepo = await findAsync(
    [...repository, MvnCentralRepository],
    async (repository: Repository): Promise<boolean> => {
      const url = getMavenMetadataXmlUrl(repository, dependency)
      const bool = await existsUrl(url)
      console.log('[getDependencyRepo]', url, bool)
      return bool
    }
  )
  if (depRepo) {
    return depRepo
  }
  return null
}
class MavenMetadata {
  constructor(
    public groupId: string,
    public artifactId: string,
    public latestVersion: string,
    public versions: string[]
  ) {
    this.groupId = groupId
    this.artifactId = artifactId
    this.latestVersion = latestVersion
    this.versions = versions
  }
}

async function parseMavenMetadata(
  repository: Repository,
  dependency: Dependency
): Promise<MavenMetadata> {
  const url = getMavenMetadataXmlUrl(repository, dependency)
  console.log('[parseMavenMetadata]', 'maven metadata url:', url)
  const content = await axios.get(url)

  const parser = new XMLParser({
    parseTagValue: false,
    parseAttributeValue: false,
  })
  const metadata = parser.parse(content.data)
  return new MavenMetadata(
    metadata.metadata.groupId,
    metadata.metadata.artifactId,
    metadata.metadata.versioning.latest !== undefined
      ? metadata.metadata.versioning.latest
      : metadata.metadata.versioning.release !== undefined
      ? metadata.metadata.versioning.release
      : null,
    metadata.metadata.versioning.versions.version
  )
}

async function main(args: any) {
  const content = fs.readFileSync(args.target, 'utf-8')

  const pom = await parsePom(content)

  console.log(pom.repositories)
  console.log(pom.dependencies)

  for (const dependency of pom.dependencies) {
    console.log('[main]', 'Dependency:', JSON.stringify(dependency))
    if (
      args.ignorePackages.includes(
        dependency.groupId + '.' + dependency.artifactId
      )
    ) {
      console.log('[main]', 'This package is ignored.')
      continue
    }
    const repository = await getDependencyRepo(pom.repositories, dependency)
    if (!repository) {
      console.warn('[main]', 'Dependency repo:', 'Not found')
      continue
    }
    console.log('[main]', 'Dependency repo:', JSON.stringify(repository))

    const metadata = await parseMavenMetadata(repository, dependency)
    console.log('[main]', 'Dependency metadata:', JSON.stringify(metadata))
    if (metadata.latestVersion === null) {
      console.warn('[main]', 'Dependency latest version:', 'Not found')
      continue
    }
    console.log('[main]', 'Dependency latest version:', metadata.latestVersion)
    if (metadata.latestVersion === dependency.version) {
      console.log('[main]', 'Dependency latest version:', 'Latest version')
      continue
    }
    console.log('[main]', 'Dependency latest version:', 'New version found')

    const replaceDep = pom.dependencies.find((d) => d === dependency)
    if (!replaceDep) {
      continue
    }
    replaceDep.version = metadata.latestVersion
    pom.dependencies.splice(
      pom.dependencies.findIndex((d) => d === dependency),
      1,
      replaceDep
    )
  }

  const parser = new XMLParser({
    preserveOrder: false,
    trimValues: true,
    ignoreAttributes: false,
    attributesGroupName: false,
    allowBooleanAttributes: true,
    parseTagValue: false,
    parseAttributeValue: false,
    removeNSPrefix: false,
    unpairedTags: ['?xml'],
    commentPropName: '#comment',
  })
  const pomXml = parser.parse(content)

  pomXml.project.repositories = pom.repositories
  pomXml.project.dependencies = pom.dependencies

  const xml = new XMLBuilder({
    preserveOrder: false,
    ignoreAttributes: false,
    attributesGroupName: false,
    format: true,
    indentBy: '    ',
    unpairedTags: ['?xml'],
    commentPropName: '#comment',
  })
    .build(pomXml)
    .replace(
      '<?xml version="1.0" encoding="UTF-8"></?xml>',
      '<?xml version="1.0" encoding="UTF-8"?>'
    )
    .replace(
      /<\/repositories>[\n ]*<repositories>/g,
      '</repository><repository>'
    )
    .replace(
      /<\/dependencies>[\n ]*<dependencies>/g,
      '</dependency><dependency>'
    )
    .replace('<repositories>', '<repositories><repository>')
    .replace('<dependencies>', '</repositories><dependencies><dependency>')
    .replace('</project>', '</dependencies></project>')

  fs.writeFileSync(
    args.target,
    xmlFormat(xml, {
      collapseContent: true,
    }),
    'utf8'
  )
}

;(async () => {
  main(
    yargs
      .option('target', {
        description: 'pom.xml path',
        demandOption: true,
      })
      .option('ignore-packages', {
        description: 'Ignore packages (Comma separated)',
        type: 'array',
        coerce: (array) => {
          if (array === undefined) {
            return []
          }
          return array.flatMap((v: string) => v.split(','))
        },
      })
      .help().argv
  )
})()
 29  
tsconfig.json
@@ -0,0 +1,29 @@
{
  "ts-node": { "files": true },
  "compilerOptions": {
    "target": "esnext",
    "moduleResolution": "Node",
    "lib": ["ESNext", "ESNext.AsyncIterable", "DOM"],
    "outDir": "./dist",
    "removeComments": true,
    "esModuleInterop": true,
    "allowJs": true,
    "checkJs": true,
    "incremental": true,
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true,
    "strict": true,
    "noImplicitAny": true,
    "strictBindCallApply": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "experimentalDecorators": true,
    "baseUrl": ".",
    "newLine": "LF"
  },
  "include": ["src/**/*"],
  "types": ["src/types/*.d.ts"]
}
0 comments on commit e3b486e
@zakwarlord7
 
Add heading textAdd bold text, <Ctrl+b>Add italic text, <Ctrl+i>
Add a quote, <Ctrl+Shift+.>Add code, <Ctrl+e>Add a link, <Ctrl+k>
Add a bulleted list, <Ctrl+Shift+8>Add a numbered list, <Ctrl+Shift+7>Add a task list, <Ctrl+Shift+l>
Directly mention a user or team
Reference an issue, pull request, or discussion
Add saved reply
Leave a comment
No file chosen
Attach files by dragging & dropping, selecting or pasting them.
Styling with Markdown is supported
 You’re not receiving notifications from this thread.
Footer
© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
feat: init · zakwarlord7/pomxml-dep-update@e3b486e
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v3

      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@9db7f66e8e16b5699a514448ce994936c63f0d54
        with:
          deno-version: v1.x

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run tests
        run: deno test -A
